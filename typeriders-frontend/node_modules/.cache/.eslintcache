[{"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\index.js":"1","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\App.js":"2","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Signup.js":"3","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\SinglePlayer.js":"4","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\MultiPlayer.js":"5","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Guest.js":"6","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Profile.js":"7","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Login.js":"8","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\components\\Sidebar.js":"9","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\components\\Navbar.js":"10"},{"size":263,"mtime":1691864273661,"results":"11","hashOfConfig":"12"},{"size":1390,"mtime":1691863627590,"results":"13","hashOfConfig":"12"},{"size":2274,"mtime":1691869140091,"results":"14","hashOfConfig":"12"},{"size":3038,"mtime":1691863627595,"results":"15","hashOfConfig":"12"},{"size":176,"mtime":1691861357590,"results":"16","hashOfConfig":"12"},{"size":1010,"mtime":1691870343922,"results":"17","hashOfConfig":"12"},{"size":749,"mtime":1691863627592,"results":"18","hashOfConfig":"12"},{"size":1996,"mtime":1691937802712,"results":"19","hashOfConfig":"12"},{"size":1197,"mtime":1691861357583,"results":"20","hashOfConfig":"12"},{"size":745,"mtime":1691861357583,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kql3h6",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\index.js",[],[],"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\App.js",["56"],[],"import './App.css';\r\nimport { BrowserRouter, Route, Routes, Redirect } from \"react-router-dom\";\r\n\r\n// Importing Pages\r\nimport Multiplayer from './pages/MultiPlayer';\r\nimport Singleplayer from './pages/SinglePlayer';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Guest from './pages/Guest';\r\nimport Profile from './pages/Profile';\r\n\r\n// Importing Components\r\nimport Sidebar from './components/Sidebar';\r\nimport Navbar from './components/Navbar';\r\n\r\n//main image\r\nimport Logo from './assets/mainicon.png';\r\n\r\nfunction App() {\r\n\r\n  const user = {\r\n    profileImage: Logo,\r\n    name: 'Ashutosh Patel',\r\n    email: 'ashu9889@example.com',\r\n    gamesPlayed: 25,\r\n    averageTypingSpeed: 50,\r\n    bestTypingSpeed: 80,\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Sidebar />\r\n        <div className=\"container\">\r\n          <Navbar />\r\n          <Routes>\r\n\r\n            <Route path=\"/\" element={<Profile {...user} />} />\r\n            <Route path=\"/single\" element={<Singleplayer />} />\r\n            <Route path=\"/multi\" element={<Multiplayer />} />\r\n            <Route path=\"/login\" element={<Login />} />\r\n            <Route path=\"/signup\" element={<Signup />} />\r\n            <Route path=\"/guest\" element={<Guest />} />\r\n          </Routes>\r\n        </div>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Signup.js",["57"],[],"import { useState } from 'react'\r\n// import { useSignup } from '../../hooks/useSignup'\r\nimport './Signup.css'\r\nexport default function SignUp() {\r\n\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userName, setUserName] = useState('');\r\n    // const { signup, isPending, error } = useSignup()\r\n    const [status, setStatus] = useState('status...');\r\n    const handleSubmit = async (e) => {\r\n            e.preventDefault();\r\n            setStatus(\"Sending...\");\r\n            let details = {\r\n                username: userName,\r\n                email: email,\r\n                password: password,\r\n            };\r\n            try{\r\n                let response = await fetch(\"http://localhost:2000/signup\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json;charset=utf-8\",\r\n                    },\r\n                    body: JSON.stringify(details),\r\n                });\r\n                setStatus(\"Submit\");\r\n                let result = await response.json();\r\n           }\r\n           catch (err) {\r\n            console.log(err);\r\n           }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"signup-form\">\r\n            <h2>SignUp</h2>\r\n            <label>\r\n                <span>User Name: </span>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(e) => setUserName(e.target.value)}\r\n                    value={userName}\r\n                />\r\n            </label>\r\n            <label>\r\n                <span>Email: </span>\r\n                <input\r\n                    type=\"email\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    value={email}\r\n                />\r\n            </label>\r\n            <label>\r\n                <span>Password: </span>\r\n                <input\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    value={password}\r\n                />\r\n            </label>\r\n            {<button onClick={handleSubmit} className=\"btn\">Signup</button>}\r\n            {<button type='button' className=\"btn\" >{status}</button>}\r\n        </form>\r\n    )\r\n}\r\n","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\SinglePlayer.js",["58"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport './SinglePlayer.css';\r\n\r\nconst SinglePlayer = () => {\r\n  const paragraphs = [\r\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\r\n    'Suspendisse potenti. Donec varius quam non felis vehicula dictum.',\r\n    'Pellentesque interdum ex ut felis ultrices volutpat.',\r\n    'Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse bibendum felis nec risus eleifend, in venenatis libero fermentum.',\r\n    // Add more paragraphs here\r\n  ];\r\n\r\n  const [currentParagraph, setCurrentParagraph] = useState('');\r\n  const [words, setWords] = useState([]);\r\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [score, setScore] = useState(0);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    generateRandomParagraph();\r\n  }, []);\r\n\r\n  const generateRandomParagraph = () => {\r\n    const randomIndex = Math.floor(Math.random() * paragraphs.length);\r\n    const paragraph = paragraphs[randomIndex];\r\n    setCurrentParagraph(paragraph);\r\n    setWords(paragraph.split(' '));\r\n    setCurrentWordIndex(0);\r\n    setUserInput('');\r\n    setScore(0);\r\n    setStartTime(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentWordIndex === 0) {\r\n      setStartTime(Date.now());\r\n    }\r\n  }, [currentWordIndex]);\r\n\r\n  useEffect(() => {\r\n    if (currentWordIndex < words.length) {\r\n      const wordToType = words[currentWordIndex];\r\n      const enteredWord = userInput.trim();\r\n      if (enteredWord === wordToType) {\r\n        setCurrentWordIndex((prevIndex) => prevIndex + 1);\r\n        setScore((prevScore) => prevScore + 1);\r\n        setUserInput('');\r\n      }\r\n    }\r\n  }, [userInput, words, currentWordIndex]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setUserInput(value);\r\n  };\r\n\r\n  const calculateWordsPerMinute = () => {\r\n    if (currentWordIndex === 0) return 0; // To avoid division by zero\r\n    const minutes = (Date.now() - startTime) / (1000 * 60);\r\n    const wordsTyped = currentWordIndex;\r\n    const wpm = Math.round(wordsTyped / minutes);\r\n    return wpm;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>{currentParagraph}</p>\r\n        <p>\r\n          {words.map((word, index) => (\r\n            <span\r\n              key={index}\r\n              className={index === currentWordIndex ? 'current-word' : ''}\r\n            >\r\n              {word}{' '}\r\n            </span>\r\n          ))}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <p>Score: {score}</p>\r\n        <p>Words Per Minute: {startTime ? calculateWordsPerMinute() : 0}</p>\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={handleInputChange}\r\n          autoFocus\r\n        />\r\n      </div>\r\n      <button onClick={generateRandomParagraph}>Next Paragraph</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SinglePlayer;\r\n","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\MultiPlayer.js",[],[],"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Guest.js",["59","60"],[],"import { useState } from 'react'\r\n\r\n\r\n\r\n//styles\r\nimport './Login.css'\r\n\r\nexport default function Login() {\r\n\r\n    const [userName, setUserName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try{\r\n            let response = await fetch(\"http://localhost:2000/guest\");\r\n            let result = await response.json();\r\n            alert(result.status);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"login-form\">\r\n            <h2>Guest</h2>\r\n            <label>\r\n                <span>Username: </span>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(e) => setUserName(e.target.value)}\r\n                    value={userName}\r\n                />\r\n            </label>\r\n            {<button onClick={handleSubmit} className=\"btn\">Continue</button>}\r\n        </form>\r\n    )\r\n}\r\n","C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Profile.js",[],[],"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\pages\\Login.js",[],[],"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\components\\Sidebar.js",[],[],"C:\\Users\\sabhi\\OneDrive\\Desktop\\Projects\\Typeriders\\typeriders-frontend\\src\\components\\Navbar.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":2,"column":40,"nodeType":"63","messageId":"64","endLine":2,"endColumn":48},{"ruleId":"61","severity":1,"message":"65","line":29,"column":21,"nodeType":"63","messageId":"64","endLine":29,"endColumn":27},{"ruleId":"66","severity":1,"message":"67","line":23,"column":6,"nodeType":"68","endLine":23,"endColumn":8,"suggestions":"69"},{"ruleId":"61","severity":1,"message":"70","line":11,"column":12,"nodeType":"63","messageId":"64","endLine":11,"endColumn":20},{"ruleId":"61","severity":1,"message":"71","line":11,"column":22,"nodeType":"63","messageId":"64","endLine":11,"endColumn":33},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateRandomParagraph'. Either include it or remove the dependency array.","ArrayExpression",["72"],"'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.",{"desc":"73","fix":"74"},"Update the dependencies array to be: [generateRandomParagraph]",{"range":"75","text":"76"},[974,976],"[generateRandomParagraph]"]