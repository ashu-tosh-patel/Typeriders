[{"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/index.js":"1","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/App.js":"2","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/MultiPlayer.js":"3","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Login.js":"4","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Guest.js":"5","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Signup.js":"6","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/SinglePlayer.js":"7","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Profile.js":"8","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/components/Sidebar.js":"9","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/components/Navbar.js":"10","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/components/DifficultyPopup.js":"11","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/HandlePopup.js":"12"},{"size":253,"mtime":1689926527452,"results":"13","hashOfConfig":"14"},{"size":1967,"mtime":1692015019452,"results":"15","hashOfConfig":"14"},{"size":165,"mtime":1689965766528,"results":"16","hashOfConfig":"14"},{"size":1794,"mtime":1692015996880,"results":"17","hashOfConfig":"14"},{"size":973,"mtime":1691951701122,"results":"18","hashOfConfig":"14"},{"size":2041,"mtime":1692012899368,"results":"19","hashOfConfig":"14"},{"size":3691,"mtime":1691872065795,"results":"20","hashOfConfig":"14"},{"size":718,"mtime":1691862369336,"results":"21","hashOfConfig":"14"},{"size":1149,"mtime":1690095669601,"results":"22","hashOfConfig":"14"},{"size":732,"mtime":1692015804617,"results":"23","hashOfConfig":"14"},{"size":2211,"mtime":1692015464140,"results":"24","hashOfConfig":"14"},{"size":1006,"mtime":1692014972010,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1ghca32",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/index.js",[],[],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/App.js",["65","66","67"],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/MultiPlayer.js",[],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Login.js",["68"],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Guest.js",["69","70"],[],"import { useState } from 'react'\n\n\n\n//styles\nimport './Login.css'\n\nexport default function Login() {\n\n    const [userName, setUserName] = useState('')\n    const [password, setPassword] = useState('')\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try{\n            let response = await fetch(\"http://localhost:2000/guest\");\n            let result = await response.json();\n            alert(result.status);\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit} className=\"login-form\">\n            <h2>Guest</h2>\n            <label>\n                <span>Username: </span>\n                <input\n                    type=\"text\"\n                    onChange={(e) => setUserName(e.target.value)}\n                    value={userName}\n                />\n            </label>\n            {<button onClick={handleSubmit} className=\"btn\">Continue</button>}\n        </form>\n    )\n}\n","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Signup.js",["71"],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/SinglePlayer.js",["72"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport './SinglePlayer.css';\n\nconst SinglePlayer = () => {\n    const paragraphs = [\n        'Tumhein Dil Nisaar Karte Tumhein Jaan Nisaar Karte Tum Pyar Karne Dete Toh Tumhe Kitna Pyar Karte Ik Baar Karne Dete Toh Tumhe Kitna Pyar Karte',\n        'apple banana chair dog elephant frog guitar hat ice jelly kite lemon mango napkin orange piano queen rabbit sun tiger',\n        'Aankhon Par Tumhari Aksar Ghazal Sunate Aankhon Par Tumhari Aksar Ghazal Sunate Kitni Wafa Hai Iss Dil Mein Har Din Tumhein Dikhate Har Din Tumhein Dikhate',\n        'Taareef Hum Tumhari Yoon Beshumaar Karte',\n    ];\n\n    const [currentParagraph, setCurrentParagraph] = useState('');\n    const [words, setWords] = useState([]);\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\n    const [userInput, setUserInput] = useState('');\n    const [score, setScore] = useState(0);\n    const [startTime, setStartTime] = useState(null);\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        generateRandomParagraph();\n    }, []);\n\n    const generateRandomParagraph = () => {\n        const randomIndex = Math.floor(Math.random() * paragraphs.length);\n        const paragraph = paragraphs[randomIndex];\n        setCurrentParagraph(paragraph);\n        setWords(paragraph.split(' '));\n        setCurrentWordIndex(0);\n        setUserInput('');\n        setScore(0);\n        setStartTime(null);\n    };\n\n    useEffect(() => {\n        if (currentWordIndex === 0) {\n            setStartTime(Date.now());\n        }\n    }, [currentWordIndex]);\n\n    useEffect(() => {\n        if (currentWordIndex < words.length) {\n            const wordToType = words[currentWordIndex];\n            const enteredWord = userInput.trim();\n            if (enteredWord === wordToType) {\n                setCurrentWordIndex((prevIndex) => prevIndex + 1);\n                setScore((prevScore) => prevScore + 1);\n                setUserInput('');\n            }\n        }\n    }, [userInput, words, currentWordIndex]);\n\n    const handleInputChange = (event) => {\n        const { value } = event.target;\n        setUserInput(value);\n    };\n\n    const calculateWordsPerMinute = () => {\n        if (currentWordIndex === 0) return 0;\n        const minutes = (Date.now() - startTime) / (1000 * 60);\n        const wordsTyped = currentWordIndex;\n        const wpm = Math.round(wordsTyped / minutes);\n        return wpm;\n    };\n\n    return (\n        <div>\n            <div>\n                <h3>PARAGRAPH TO BE TYPED :- </h3>\n                <p>{currentParagraph}</p>\n                <p>\n                    {words.map((word, index) => (\n                        <span\n                            key={index}\n                            className={index === currentWordIndex ? 'current-word' : ''}\n                        >\n                            {word}{' '}\n                        </span>\n                    ))}\n                </p>\n            </div>\n            <div>\n                <p>Score: {score}</p>\n                <div className=\"box\">\n                    <h4>Type here :-</h4>\n\n                    <input\n                        className=\"form\"\n                        ref={inputRef}\n                        type=\"text\"\n                        value={userInput}\n                        onChange={handleInputChange}\n                        autoFocus\n                    />\n                    {score === words.length && <p>Words Per Minute:  {calculateWordsPerMinute()}</p>}\n                </div>\n            </div>\n            <button className=\"btn\" onClick={generateRandomParagraph}>Next Paragraph</button>\n        </div>\n    );\n};\n\nexport default SinglePlayer;\n","/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/Profile.js",[],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/components/Sidebar.js",[],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/components/Navbar.js",[],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/components/DifficultyPopup.js",[],[],"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/HandlePopup.js",[],[],{"ruleId":"73","severity":1,"message":"74","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":18},{"ruleId":"73","severity":1,"message":"77","line":3,"column":40,"nodeType":"75","messageId":"76","endLine":3,"endColumn":48},{"ruleId":"73","severity":1,"message":"78","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":19},{"ruleId":"73","severity":1,"message":"79","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":19},{"ruleId":"73","severity":1,"message":"80","line":11,"column":12,"nodeType":"75","messageId":"76","endLine":11,"endColumn":20},{"ruleId":"73","severity":1,"message":"81","line":11,"column":22,"nodeType":"75","messageId":"76","endLine":11,"endColumn":33},{"ruleId":"73","severity":1,"message":"82","line":29,"column":17,"nodeType":"75","messageId":"76","endLine":29,"endColumn":23},{"ruleId":"83","severity":1,"message":"84","line":22,"column":8,"nodeType":"85","endLine":22,"endColumn":10,"suggestions":"86"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Multiplayer' is defined but never used.","'useEffect' is defined but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'result' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateRandomParagraph'. Either include it or remove the dependency array.","ArrayExpression",["87"],{"desc":"88","fix":"89"},"Update the dependencies array to be: [generateRandomParagraph]",{"range":"90","text":"91"},[1079,1081],"[generateRandomParagraph]"]