{"ast":null,"code":"var _jsxFileName = \"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/SinglePlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './SinglePlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SinglePlayer = () => {\n  _s();\n  const paragraphs = ['Tumhein Dil Nisaar Karte Tumhein Jaan Nisaar Karte Tum Pyar Karne Dete Toh Tumhe Kitna Pyar Karte Ik Baar Karne Dete Toh Tumhe Kitna Pyar Karte', 'Tumhare Saare Mausam Haan Hum Bahaar Karte Tum Pyar Karne Dete Toh Tumhe Kitna Pyar Karte Ik Baar Karne Dete Toh Tumhe Kitna Pyar Karte Tumhe Kitna Pyaar Karte Tumhe Kitna Pyaar Karte', 'Aankhon Par Tumhari Aksar Ghazal Sunate Aankhon Par Tumhari Aksar Ghazal Sunate Kitni Wafa Hai Iss Dil Mein Har Din Tumhein Dikhate Har Din Tumhein Dikhate', 'Taareef Hum Tumhari Yoon Beshumaar Karte'];\n  const [currentParagraph, setCurrentParagraph] = useState('');\n  const [words, setWords] = useState([]);\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [score, setScore] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    generateRandomParagraph();\n  }, []);\n  const generateRandomParagraph = () => {\n    const randomIndex = Math.floor(Math.random() * paragraphs.length);\n    const paragraph = paragraphs[randomIndex];\n    setCurrentParagraph(paragraph);\n    setWords(paragraph.split(' '));\n    setCurrentWordIndex(0);\n    setUserInput('');\n    setScore(0);\n    setStartTime(null);\n  };\n  useEffect(() => {\n    if (currentWordIndex === 0) {\n      setStartTime(Date.now());\n    }\n  }, [currentWordIndex]);\n  useEffect(() => {\n    if (currentWordIndex < words.length) {\n      const wordToType = words[currentWordIndex];\n      const enteredWord = userInput.trim();\n      if (enteredWord === wordToType) {\n        setCurrentWordIndex(prevIndex => prevIndex + 1);\n        setScore(prevScore => prevScore + 1);\n        setUserInput('');\n      }\n    }\n  }, [userInput, words, currentWordIndex]);\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setUserInput(value);\n  };\n  const calculateWordsPerMinute = () => {\n    if (currentWordIndex === 0) return 0;\n    const minutes = (Date.now() - startTime) / (1000 * 60);\n    const wordsTyped = currentWordIndex;\n    const wpm = Math.round(wordsTyped / minutes);\n    return wpm;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"PARAGRAPH TO BE TYPED :- \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentParagraph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: index === currentWordIndex ? 'current-word' : '',\n          children: [word, ' ']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Type here :-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: userInput,\n          onChange: handleInputChange,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), score === words.length && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Words Per Minute:  \", calculateWordsPerMinute()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: generateRandomParagraph,\n      children: \"Next Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(SinglePlayer, \"JEytFjAdJ37AHEpfA2RHbSWVmfE=\");\n_c = SinglePlayer;\nexport default SinglePlayer;\nvar _c;\n$RefreshReg$(_c, \"SinglePlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SinglePlayer","_s","paragraphs","currentParagraph","setCurrentParagraph","words","setWords","currentWordIndex","setCurrentWordIndex","userInput","setUserInput","score","setScore","startTime","setStartTime","inputRef","generateRandomParagraph","randomIndex","Math","floor","random","length","paragraph","split","Date","now","wordToType","enteredWord","trim","prevIndex","prevScore","handleInputChange","event","value","target","calculateWordsPerMinute","minutes","wordsTyped","wpm","round","children","fileName","_jsxFileName","lineNumber","columnNumber","map","word","index","className","ref","type","onChange","autoFocus","onClick","_c","$RefreshReg$"],"sources":["/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/SinglePlayer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './SinglePlayer.css';\n\nconst SinglePlayer = () => {\n    const paragraphs = [\n        'Tumhein Dil Nisaar Karte Tumhein Jaan Nisaar Karte Tum Pyar Karne Dete Toh Tumhe Kitna Pyar Karte Ik Baar Karne Dete Toh Tumhe Kitna Pyar Karte',\n        'Tumhare Saare Mausam Haan Hum Bahaar Karte Tum Pyar Karne Dete Toh Tumhe Kitna Pyar Karte Ik Baar Karne Dete Toh Tumhe Kitna Pyar Karte Tumhe Kitna Pyaar Karte Tumhe Kitna Pyaar Karte',\n        'Aankhon Par Tumhari Aksar Ghazal Sunate Aankhon Par Tumhari Aksar Ghazal Sunate Kitni Wafa Hai Iss Dil Mein Har Din Tumhein Dikhate Har Din Tumhein Dikhate',\n        'Taareef Hum Tumhari Yoon Beshumaar Karte',\n    ];\n\n    const [currentParagraph, setCurrentParagraph] = useState('');\n    const [words, setWords] = useState([]);\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\n    const [userInput, setUserInput] = useState('');\n    const [score, setScore] = useState(0);\n    const [startTime, setStartTime] = useState(null);\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        generateRandomParagraph();\n    }, []);\n\n    const generateRandomParagraph = () => {\n        const randomIndex = Math.floor(Math.random() * paragraphs.length);\n        const paragraph = paragraphs[randomIndex];\n        setCurrentParagraph(paragraph);\n        setWords(paragraph.split(' '));\n        setCurrentWordIndex(0);\n        setUserInput('');\n        setScore(0);\n        setStartTime(null);\n    };\n\n    useEffect(() => {\n        if (currentWordIndex === 0) {\n            setStartTime(Date.now());\n        }\n    }, [currentWordIndex]);\n\n    useEffect(() => {\n        if (currentWordIndex < words.length) {\n            const wordToType = words[currentWordIndex];\n            const enteredWord = userInput.trim();\n            if (enteredWord === wordToType) {\n                setCurrentWordIndex((prevIndex) => prevIndex + 1);\n                setScore((prevScore) => prevScore + 1);\n                setUserInput('');\n            }\n        }\n    }, [userInput, words, currentWordIndex]);\n\n    const handleInputChange = (event) => {\n        const { value } = event.target;\n        setUserInput(value);\n    };\n\n    const calculateWordsPerMinute = () => {\n        if (currentWordIndex === 0) return 0;\n        const minutes = (Date.now() - startTime) / (1000 * 60);\n        const wordsTyped = currentWordIndex;\n        const wpm = Math.round(wordsTyped / minutes);\n        return wpm;\n    };\n\n    return (\n        <div>\n            <div>\n                <h3>PARAGRAPH TO BE TYPED :- </h3>\n                <p>{currentParagraph}</p>\n                <p>\n                    {words.map((word, index) => (\n                        <span\n                            key={index}\n                            className={index === currentWordIndex ? 'current-word' : ''}\n                        >\n                            {word}{' '}\n                        </span>\n                    ))}\n                </p>\n            </div>\n            <div>\n                <p>Score: {score}</p>\n                <h4>Type here :-</h4>\n                <div>\n\n                <input\n                    \n                    ref={inputRef}\n                    type=\"text\"\n                    value={userInput}\n                    onChange={handleInputChange}\n                    autoFocus\n                    />\n                    </div>\n                {score === words.length && <p>Words Per Minute:  {calculateWordsPerMinute()}</p>}\n            </div>\n            <button className=\"btn\" onClick={generateRandomParagraph}>Next Paragraph</button>\n        </div>\n    );\n};\n\nexport default SinglePlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}