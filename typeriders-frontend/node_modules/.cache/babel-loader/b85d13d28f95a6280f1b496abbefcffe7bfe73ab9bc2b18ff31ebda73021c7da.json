{"ast":null,"code":"var _jsxFileName = \"/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/SinglePlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingGame = () => {\n  _s();\n  const paragraphs = ['Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Suspendisse potenti. Donec varius quam non felis vehicula dictum.', 'Pellentesque interdum ex ut felis ultrices volutpat.', 'Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse bibendum felis nec risus eleifend, in venenatis libero fermentum.'\n  // Add more paragraphs here\n  ];\n\n  const [currentParagraph, setCurrentParagraph] = useState('');\n  const [words, setWords] = useState([]);\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    generateRandomParagraph();\n  }, []);\n  const generateRandomParagraph = () => {\n    const randomIndex = Math.floor(Math.random() * paragraphs.length);\n    const paragraph = paragraphs[randomIndex];\n    setCurrentParagraph(paragraph);\n    setWords(paragraph.split(' '));\n    setCurrentWordIndex(0);\n    setUserInput('');\n    setScore(0);\n  };\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setUserInput(value);\n    checkCurrentWord(value.trim());\n  };\n  const checkCurrentWord = inputWord => {\n    const currentWord = words[currentWordIndex];\n    if (currentWord && inputWord === currentWord) {\n      setCurrentWordIndex(prevIndex => prevIndex + 1);\n      setScore(prevScore => prevScore + 1);\n      setUserInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentParagraph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: index === currentWordIndex ? 'current-word' : '',\n          children: [word, ' ']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: handleInputChange,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateRandomParagraph,\n      children: \"Next Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// export default TypingGame;\n_s(TypingGame, \"2MITrNkDI1lmYZw30WiIVcWAu88=\");\n_c = TypingGame;\nexport default SinglePlayer;\nvar _c;\n$RefreshReg$(_c, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TypingGame","_s","paragraphs","currentParagraph","setCurrentParagraph","words","setWords","currentWordIndex","setCurrentWordIndex","userInput","setUserInput","score","setScore","generateRandomParagraph","randomIndex","Math","floor","random","length","paragraph","split","handleInputChange","event","value","target","checkCurrentWord","trim","inputWord","currentWord","prevIndex","prevScore","children","fileName","_jsxFileName","lineNumber","columnNumber","map","word","index","className","type","onChange","autoFocus","onClick","_c","SinglePlayer","$RefreshReg$"],"sources":["/Volumes/My Files/React/TypeRiders/typeriders-frontend/src/pages/SinglePlayer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TypingGame = () => {\n  const paragraphs = [\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    'Suspendisse potenti. Donec varius quam non felis vehicula dictum.',\n    'Pellentesque interdum ex ut felis ultrices volutpat.',\n    'Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse bibendum felis nec risus eleifend, in venenatis libero fermentum.',\n    // Add more paragraphs here\n  ];\n\n  const [currentParagraph, setCurrentParagraph] = useState('');\n  const [words, setWords] = useState([]);\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    generateRandomParagraph();\n  }, []);\n\n  const generateRandomParagraph = () => {\n    const randomIndex = Math.floor(Math.random() * paragraphs.length);\n    const paragraph = paragraphs[randomIndex];\n    setCurrentParagraph(paragraph);\n    setWords(paragraph.split(' '));\n    setCurrentWordIndex(0);\n    setUserInput('');\n    setScore(0);\n  };\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n    setUserInput(value);\n    checkCurrentWord(value.trim());\n  };\n\n  const checkCurrentWord = (inputWord) => {\n    const currentWord = words[currentWordIndex];\n    if (currentWord && inputWord === currentWord) {\n      setCurrentWordIndex((prevIndex) => prevIndex + 1);\n      setScore((prevScore) => prevScore + 1);\n      setUserInput('');\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <p>{currentParagraph}</p>\n        <p>\n          {words.map((word, index) => (\n            <span\n              key={index}\n              className={index === currentWordIndex ? 'current-word' : ''}\n            >\n              {word}{' '}\n            </span>\n          ))}\n        </p>\n      </div>\n      <div>\n        <p>Score: {score}</p>\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={handleInputChange}\n          autoFocus\n        />\n      </div>\n      <button onClick={generateRandomParagraph}>Next Paragraph</button>\n    </div>\n  );\n};\n\n// export default TypingGame;\n\nexport default SinglePlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}